pr
dim(pr)
w <- pr * (1-pr)
w
z <- eta + (y-pr)/w
z
dim(z)
sw <- sqrt(w)
sw
mw <- rep(sw, p)
mw
dim(sw)
sw
dim(sw)
mw <- matrix(rep(sw, p))
mw
mw <- matrix(rep(sw, p),nrow=n)
mw
x_work = mw*x
y_work = sw*z
x_work
dim(x_work)
dim(y_work)
mw.shape
dim(mw)
dim(sw)
dim(x_work)
dim(y_work)
beta_new = lm(x_work, y_work)
beta_new= lm(x_work ~ y_work)
beta_new
z <- eta + (y-pr)/w
z
beta_new
lm$intercept
lm$(Intercept)
lm$Intercept
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
beta_new
beta_new.intercept
beta_new.Intercept
coef(beta_new)["(Intercept)"]
beta_new
coef(beta_new)["(Intercept)"]
coef(beta_new)
coef(beta_new)$"(Intercept)"
coef(beta_new)[1]
coef(beta_new)[1:]
coef(beta_new)[1:n]
coef(beta_new)[1:5]
beta_new
coef(beta_new)[1:5]
coef(beta_new)[1:p]
beta_new = coef(lmResult)["(Intercept)"]
lmResult= lm(x_work ~ y_work)
beta_new = coef(lmResult)["(Intercept)"]
beta_new
x_work = mw*x
y_work = sw*z
lmResult= lm(x_work ~ y_work)
lmResult
beta_new = coef(lmResult)[1:c]
beta_new
beta_new = coef(lmResult)[1]
beta_new
beta_new = coef(lmResult)[2]
beta_new
beta_new = coef(lmResult)[1:c]
beta_new
lmResult
beta_new = coef(lmResult)[1][1:c]
beta_new
beta_new = coef(lmResult)[1,1:c]
beta_new
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
myQR <- function(A){
## Perform QR factorization on the matrix A
## FILL IN CODE HERE ##
n = dim(A)[1]
m = dim(A)[2]
R = A
Q = diag(1,n)
for (k in 1:(m-1))
{
x = matrix(0,n,1)
x[k:n,1] = R[k:n,k]
v = x
v[k] = x[k] + sign(x[k,1])*norm(x,type='F')
s = norm(v,type='F')
if(s!=0)
{
u = v/s
R = R - 2*u%*%(t(u)%*%R)
Q = Q - 2*u%*%(t(u)%*%Q)
}
}
## Function should output a list with Q.transpose and R
return(list("Q" = t(Q), "R" = R))
}
myEigen_QR <- function(A, nIter){
## Perform PCA on matrix A using your QR function, myQRC.
## A: Square matrix
## nIter: Number of iterations
## FILL IN CODE HERE ##
## Don't forget to centralize A ##
A_copy = A
r = dim(A_copy)[0]
c = dim(A_copy)[1]
V = matrix(runif(r*r),nrow = r)
for(i in 1:nIter)
{
output = myQR(V)
Q = output$Q
V = A_copy%*%Q
}
output =  myQR(V)
V=output$Q
R=output$R
D = diag(R)
## Function should output a list with D and V, where
## D is a vector of eigenvalues of A, and V is the
## matrix of eigenvectors of A (in the same order as
## the eigenvalues in D.)
return(list("D" = D, "V" = V))
}
#####################################
## Function 2: Logistic Regression ##
#####################################
## First, define expit (sigmoid) function
expit <- function(x){
1 / (1 + exp(-x))
}
myLogistic <- function(X, Y, epsilon = 1e-6){
## X is an n x p matrix of explanatory variables
## Y is an n dimensional vector of binary responses
## (e.g. Yi is 0 or 1).
## Do NOT simulate data in this function. n and p
## should be determined by X.
## Use myQRC inside of this function
## FILL CODE HERE ##
r = dim(X)[1]
c = dim(X)[2]
x = X
y = Y
beta = matrix(rep(0, c), nrow = c)
while(TRUE) {
eta = x%*%beta
pr <- expit(eta)
w <- pr * (1-pr)
z <- eta + (y-pr)/w
sw <- sqrt(w)
#Check the below line
mw <- matrix(rep(sw, p),nrow=n)
x_work = mw*x
y_work = sw*z
#Check the below line
lmResult= lm(x_work ~ y_work)
beta_new = coef(lmResult)[1,1:c]
err <- sum(abs(beta_new-beta))
beta <- beta_new
if(err < epsilon)
break
}
beta_logistic = beta
## Function returns beta_logistic, the solution to
## the logistic regression problem
return(beta_logistic)
}
n = 1000
p = 5
X = matrix(runif(n*p), nrow = n)
beta = matrix(rep(1),nrow = p)
print(beta)
Y = matrix(runif(n),nrow=n) < expit(X%*%beta)
r = dim(X)[1]
c = dim(X)[2]
x = X
y = Y
beta = matrix(rep(0, c), nrow = c)
eta = x%*%beta
eta
pr <- expit(eta)
pr
dim(pr)
w <- pr * (1-pr)
z <- eta + (y-pr)/w
sw <- sqrt(w)
w
z
sw
dim(sw)
mw <- matrix(rep(sw, p),nrow=n)
mw
dim(mw)
x_work = mw*x
dim(x_work)
x_work
x
X = matrix(rnorm(n*p), nrow = n)
X
x = X
r = dim(X)[1]
c = dim(X)[2]
x = X
y = Y
beta = matrix(rep(0, c), nrow = c)
eta = x%*%beta
pr <- expit(eta)
w <- pr * (1-pr)
z <- eta + (y-pr)/w
sw <- sqrt(w)
mw <- matrix(rep(sw, p),nrow=n)
x_work = mw*x
y_work = sw*z
eta = x%*%beta
pr <- expit(eta)
w <- pr * (1-pr)
z <- eta + (y-pr)/w
sw <- sqrt(w)
#Check the below line
mw <- matrix(rep(sw, p),nrow=n)
x_work = mw*x
y_work = sw*z
lsfit(x_work)
lsfit(x_work,y_work)
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
x_work = mw*x
n = 1000
p = 5
X = matrix(rnorm(n*p), nrow = n)
beta = matrix(rep(1),nrow = p)
print(beta)
Y = matrix(runif(n),nrow=n) < expit(X%*%beta)
r = dim(X)[1]
c = dim(X)[2]
x = X
y = Y
beta = matrix(rep(0, c), nrow = c)
eta = x%*%beta
pr <- expit(eta)
w <- pr * (1-pr)
z <- eta + (y-pr)/w
sw <- sqrt(w)
#Check the below line
mw <- matrix(rep(sw, p),nrow=n)
x_work = mw*x
y_work = sw*z
beta_new = lsfit(x_work,y_work)$qraux
beta_new
beta_new = lsfit(x_work,y_work)
beta_new
beta_new = lsfit(x_work,y_work)$qraux
beta_new
beta_new = lsfit(x_work,y_work)$$qraux
beta_new = lsfit(x_work,y_work)$qraux
beta_new = lsfit(x_work,y_work)
b=beta_new$%qr
b=beta_new$qr
b
b=beta_new$coefficients
b
beta_new = lsfit(x_work,y_work)
beta_new
coef(beta_new)
beta_new
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
beta_new
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
beta
beta_logistic
n = 1000
p = 5
X = matrix(rnorm(n*p), nrow = n)
beta = matrix(rep(1),nrow = p)
print(beta)
Y = matrix(runif(n),nrow=n) < expit(X%*%beta)
r = dim(X)[1]
c = dim(X)[2]
x = X
y = Y
eta = x%*%beta
pr <- expit(eta)
w <- pr * (1-pr)
z <- eta + (y-pr)/w
sw <- sqrt(w)
#Check the below line
mw <- matrix(rep(sw, p),nrow=n)
x_work = mw*x
y_work = sw*z
#Check the below line
beta_new <- lm(y_work ~ 0 + x_work)$coefficient
beta_new
beta_new <- lm(y_work ~ 0 + x_work)
beta_new
beta_new <- lsfit(y_work, x_work)
beta_new
beta_new <- lsfit(x_work, y_work)
beta_new
beta_new <- lm(y_work, x_work)
beta_new <- lm(y_work, 0+x_work)
beta_new <- lm(y_work ~ 0+x_work)
beta_new
beta_new <- lm(y_work ~ x_work)
beta_new
beta_new <- lm(y_work ~ x_work)$coefficient
beta_new
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
beta_new <- lm(y_work ~ x_work)$coefficient
beta_new
beta_new <- lm(y_work ~ x_work)$coefficient[2:6]
beta_new
lm_output <- lm(y_work ~ x_work)$coefficient
lm_output
beta_new <- lm_output[2:(c+1)]
intercept <- lm_output[1]
beta_new
intercept
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
myQR <- function(A){
## Perform QR factorization on the matrix A
## FILL IN CODE HERE ##
n = dim(A)[1]
m = dim(A)[2]
R = A
Q = diag(1,n)
for (k in 1:(m-1))
{
x = matrix(0,n,1)
x[k:n,1] = R[k:n,k]
v = x
v[k] = x[k] + sign(x[k,1])*norm(x,type='F')
s = norm(v,type='F')
if(s!=0)
{
u = v/s
R = R - 2*u%*%(t(u)%*%R)
Q = Q - 2*u%*%(t(u)%*%Q)
}
}
## Function should output a list with Q.transpose and R
return(list("Q" = t(Q), "R" = R))
}
myEigen_QR <- function(A, nIter){
## Perform PCA on matrix A using your QR function, myQRC.
## A: Square matrix
## nIter: Number of iterations
## FILL IN CODE HERE ##
## Don't forget to centralize A ##
A_copy = A
r = dim(A_copy)[0]
c = dim(A_copy)[1]
V = matrix(runif(r*r),nrow = r)
for(i in 1:nIter)
{
output = myQR(V)
Q = output$Q
V = A_copy%*%Q
}
output =  myQR(V)
V=output$Q
R=output$R
D = diag(R)
## Function should output a list with D and V, where
## D is a vector of eigenvalues of A, and V is the
## matrix of eigenvectors of A (in the same order as
## the eigenvalues in D.)
return(list("D" = D, "V" = V))
}
n = 100
p = 5
X = matrix(runif(n*p),nrow = n)
n = dim(X)[1]
p = dim(X)[2]
X_t = t(X)
A = X_t%*%X
A_copy = A
r = dim(A_copy)[0]
c = dim(A_copy)[1]
r
r = dim(A_copy)[1]
c = dim(A_copy)[2]
r
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
rm(list=ls())
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
Rcpp::sourceCpp('D:/College Documents/HW/STATS202A/HW7/QR.cpp')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW6/QR.R')
source('D:/College Documents/HW/STATS202A/HW6/QR.R')
source('D:/College Documents/HW/STATS202A/HW6/QR.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
lm_output <- myLM(x_work,y_work)[2:(c+1)]
n = 1000
p = 5
X = matrix(rnorm(n*p), nrow = n)
beta = matrix(rep(1),nrow = p)
print(beta)
Y = matrix(runif(n),nrow=n) < expit(X%*%beta)
myLM <- function(X, Y){
## X is an n x p matrix of explanatory variables
## Y is an n dimensional vector of responses
## Do NOT simulate data in this function. n and p
## should be determined by X.
## Use myQR inside of this function
## FILL CODE HERE ##
n = dim(X)[1]
p = dim(X)[2]
Z = cbind(matrix(1,n,1),X,matrix(Y,nrow=n,ncol=1))
output = myQRC(Z)
R_o=output$R
R1 = R_o[1:(p+1),1:(p+1)]
Y1 = R_o[1:(p+1),(p+2)]
beta_ls = solve(R1,Y1)
## Function returns beta_ls, the least squares
## solution vector
return(beta_ls)
}
r = dim(X)[1]
c = dim(X)[2]
x = X
y = Y
beta = matrix(rep(0, c), nrow = c)
eta = x%*%beta
pr <- expit(eta)
w <- pr * (1-pr)
z <- eta + (y-pr)/w
sw <- sqrt(w)
#Check the below line
mw <- matrix(rep(sw, p),nrow=n)
x_work = mw*x
y_work = sw*z
x_work
y_work
lm_output <- myLM(x_work,y_work)[2:(c+1)]
lm_output
lm_output <- myLM(y_work,x_work)[2:(c+1)]
lm_output
lm_output <- myLM(x_work,y_work)[2:(c+1)]
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
beta_new <- lm_output[2:(c+1)]
n = 1000
p = 5
X = matrix(rnorm(n*p), nrow = n)
beta = matrix(rep(1),nrow = p)
print(beta)
Y = matrix(runif(n),nrow=n) < expit(X%*%beta)
r = dim(X)[1]
c = dim(X)[2]
x = X
y = Y
beta = matrix(rep(0, c), nrow = c)
eta = x%*%beta
pr <- expit(eta)
w <- pr * (1-pr)
z <- eta + (y-pr)/w
sw <- sqrt(w)
#Check the below line
mw <- matrix(rep(sw, p),nrow=n)
x_work = mw*x
y_work = sw*z
lm_output <- myLM(x_work,y_work)[2:(c+1)]
beta_new <- lm_output[2:(c+1)]
beta_new
lm_output <- myLM(x_work,y_work)
beta_new <- lm_output[2:(c+1)]
beta_new
intercept <- lm_output[1]
intercept
intercept <- lm_output[1]
err <- sum(abs(beta_new-beta))
beta <- beta_new
if(err < epsilon)
break
epsilon = 1e-6
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
source('D:/College Documents/HW/STATS202A/HW7/PCA.R')
